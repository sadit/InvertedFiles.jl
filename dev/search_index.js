var documenterSearchIndex = {"docs":
[{"location":"invfile/","page":"Inv. Files","title":"Inv. Files","text":"\nCurrentModule = InvertedFiles\nDocTestSetup = quote\n    using InvertedFiles\nend","category":"page"},{"location":"invfile/#Inverted-files","page":"Inv. Files","title":"Inverted files","text":"","category":"section"},{"location":"invfile/","page":"Inv. Files","title":"Inv. Files","text":"append!\npush!","category":"page"},{"location":"invfile/","page":"Inv. Files","title":"Inv. Files","text":"prepare_posting_lists_for_querying\nsearch!","category":"page"},{"location":"invfile/#WeightedInvertedFile","page":"Inv. Files","title":"WeightedInvertedFile","text":"","category":"section"},{"location":"invfile/","page":"Inv. Files","title":"Inv. Files","text":"WeightedInvertedFile","category":"page"},{"location":"invfile/#InvertedFiles.WeightedInvertedFile","page":"Inv. Files","title":"InvertedFiles.WeightedInvertedFile","text":"struct WeightedInvertedFile <: AbstractInvertedFile\n\nAn inverted index is a sparse matrix representation of with floating point weights, it supports only positive non-zero values. This index is optimized to efficiently solve k nearest neighbors (cosine distance, using previously normalized vectors).\n\nParameters\n\nlists: posting lists (non-zero id-elements in rows)\nweights: non-zero weights (in rows)\nsizes: number of non-zero values in each element (non-zero values in columns)\n\n\n\n\n\n","category":"type"},{"location":"invfile/#BinaryInvertedFile","page":"Inv. Files","title":"BinaryInvertedFile","text":"","category":"section"},{"location":"invfile/","page":"Inv. Files","title":"Inv. Files","text":"BinaryInvertedFile","category":"page"},{"location":"invfile/#InvertedFiles.BinaryInvertedFile","page":"Inv. Files","title":"InvertedFiles.BinaryInvertedFile","text":"struct BinaryInvertedFile <: AbstractInvertedFile\n\nCreates a binary weighted inverted index. An inverted index is an sparse matrix representation optimized for computing k nn elements (columns) under some distance.\n\nProperties:\n\ndist: Distance function to be applied, valid values are: IntersectionDissimilarity(), DiceDistance(), JaccardDistance(), and `CosineDistanceSet()\nlists: posting lists (non-zero values of the rows in the matrix)\nsizes: number of non-zero values per object (number of non-zero values per column)\nlocks: Per row locks for multithreaded construction\n\n\n\n\n\n","category":"type"},{"location":"invfile/#Sparse-matrices","page":"Inv. Files","title":"Sparse matrices","text":"","category":"section"},{"location":"invfile/","page":"Inv. Files","title":"Inv. Files","text":"Inverted indexes/files are representations of sparse matrices optimized for certain operations. We provide some functions to convert inverted files to sparse matrices.","category":"page"},{"location":"invfile/","page":"Inv. Files","title":"Inv. Files","text":"sparse\nsparsevec","category":"page"},{"location":"invfile/","page":"Inv. Files","title":"Inv. Files","text":"Inverted indexes constructors also support sparse matrices as input (wrapped on MatrixDatabase structs)","category":"page"},{"location":"sparse/","page":"Sparse","title":"Sparse","text":"\nCurrentModule = InvertedFiles\nDocTestSetup = quote\n    using InvertedFiles\nend","category":"page"},{"location":"sparse/#Sparse-matrices","page":"Sparse","title":"Sparse matrices","text":"","category":"section"},{"location":"sparse/","page":"Sparse","title":"Sparse","text":"Inverted indexes/files are representations of sparse matrices optimized for certain operations. We provide some functions to convert inverted files to sparse matrices.","category":"page"},{"location":"sparse/","page":"Sparse","title":"Sparse","text":"sparse","category":"page"},{"location":"sparse/","page":"Sparse","title":"Sparse","text":"Inverted indexes constructors also support sparse matrices as input (wrapped on MatrixDatabase structs)","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = InvertedFiles","category":"page"},{"location":"#InvertedFiles.jl","page":"Home","title":"InvertedFiles.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"InvertedFiles.jl is a library for construction and searching of InvertedFiles. Despite its name, it only works for in memory representations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"An inverted file is a sparse matrix that it is optimized to retrieve top-k columns under some distance function; in fact, it will compute k nearest neighbors. This package implements both binary and floating point weighted inverted files. The search api is identical to that found in SimilaritySearch.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Additionally, it defines convertions to traditional sparse matrices and also a convenient sparse vector based on dictionaries (only basic methods are supported).","category":"page"}]
}
